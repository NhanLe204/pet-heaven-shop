/* eslint-disable @typescript-eslint/no-explicit-any */
import { Request, Response } from 'express';
import mongoose from 'mongoose';
import brandModel from '../models/brand.model.js';
import { IBrand } from '../interfaces/brand.interface.js';
import productModel from '../models/product.model.js';

interface AuthenticatedRequest extends Request {
  brand?: IBrand;
}

// L·∫•y t·∫•t c·∫£ brands
export const getAllBrands = async (req: Request, res: Response): Promise<void> => {
  try {
    const result = await brandModel.find();
    res.status(200).json({ success: true, result });
  } catch (error) {
    if (error instanceof Error) {
      console.error(`L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu: ${error.message}`);
      res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
      return;
    }
    console.error('L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu:', error);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
  }
};

// L·∫•y brand theo ID
export const getBrandById = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
      res.status(400).json({ success: false, message: 'ID th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá' });
      return;
    }
    const brand = await brandModel.findById(id);
    if (!brand) {
      res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu' });
      return;
    }
    res.status(200).json({ success: true, message: 'L·∫•y th∆∞∆°ng hi·ªáu th√†nh c√¥ng', brand });
  } catch (error) {
    if (error instanceof Error) {
      console.error(`L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu: ${error.message}`);
      res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
      return;
    }
    console.error('L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu:', error);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
  }
};

// Th√™m brand m·ªõi
export const insertBrand = async (req: Request, res: Response) => {
  try {
    const { brand_name } = req.body;
    console.log("üëâ req.body:", req.body);
    console.log("üëâ req.files:", req.files);
    // ‚úÖ L·∫•y file t·ª´ Cloudinary th√¥ng qua multer
    const uploadedFiles = (req.files as Express.Multer.File[]) || [];
    const imageUrls = uploadedFiles.map((file) => (file as any).path); // Cloudinary tr·∫£ v·ªÅ .path = URL

    const brand = await brandModel.create({
      brand_name,
      image_url: imageUrls,
    });

    res.status(201).json({
      success: true,
      brand,
    });
  } catch (error: any) {
    console.error("‚ùå L·ªói insertBrand:", error);
    res.status(500).json({
      success: false,
      message: error.message || "Kh√¥ng th·ªÉ th√™m brand",
    });
  }
};


// C·∫≠p nh·∫≠t brand
export const updateBrand = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { brand_name, existing_images, new_images } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      res.status(400).json({
        success: false,
        message: 'ID th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá'
      });
      return;
    }

    const currentBrand = await brandModel.findById(id);
    if (!currentBrand) {
      res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu' });
      return;
    }

    // X·ª≠ l√Ω h√¨nh ·∫£nh
    let images_url: string[] = [...(currentBrand.image_url || [])];

    // ·∫¢nh c≈©
    let keptImages: string[] = [];
    if (existing_images) {
      keptImages = typeof existing_images === 'string' ? JSON.parse(existing_images) : existing_images;
      if (!Array.isArray(keptImages)) keptImages = [];
    }

    // ·∫¢nh m·ªõi
    if (req.files && Array.isArray(req.files) && req.files.length > 0) {
      const newImagesPaths = req.files.map((file) => file.path);
      images_url = newImagesPaths; // ‚ùå b·ªè new_images logic
    } else {
      images_url = keptImages;
    }


    const updatedBrand = await brandModel.findByIdAndUpdate(
      id,
      {
        brand_name,
        image_url: images_url
      },
      { new: true, runValidators: true }
    );

    if (!updatedBrand) {
      res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu' });
      return;
    }

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng',
      brand: updatedBrand
    });
  } catch (error) {
    if (error instanceof Error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu: ${error.message}`);
      res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
      return;
    }
    console.error('L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu:', error);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
  }
};

// X√≥a brand
export const deleteBrand = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      res.status(400).json({ success: false, message: 'ID th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá' });
      return;
    }

    const brand = await brandModel.findById(id);
    if (!brand) {
      res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu' });
      return;
    }

    // Ki·ªÉm tra c√≥ s·∫£n ph·∫©m n√†o ƒëang d√πng brand n√†y kh√¥ng
    const productUsingBrand = await productModel.findOne({ brand: id });
    if (productUsingBrand) {
      res.status(400).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ x√≥a th∆∞∆°ng hi·ªáu v√¨ ƒëang c√≥ s·∫£n ph·∫©m s·ª≠ d·ª•ng'
      });
      return;
    }

    // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o tham chi·∫øu ‚Üí x√≥a c·ª©ng
    await brandModel.findByIdAndDelete(id);
    res.status(200).json({ success: true, message: 'X√≥a th∆∞∆°ng hi·ªáu th√†nh c√¥ng' });
  } catch (error) {
    if (error instanceof Error) {
      console.error(`L·ªói khi x√≥a th∆∞∆°ng hi·ªáu: ${error.message}`);
      res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß', error: error.message });
      return;
    }
    console.error('L·ªói khi x√≥a th∆∞∆°ng hi·ªáu:', error);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
  }
};

// Upload ·∫£nh cho brand
export const uploadBrandImage = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log("Received files:", req.files);

    let uploadedFiles: any[] = [];

    if (Array.isArray(req.files)) {
      uploadedFiles = req.files; // khi d√πng .array()
    } else if (req.file) {
      uploadedFiles = [req.file]; // khi d√πng .single()
    } else if (req.files && typeof req.files === 'object') {
      // khi d√πng .fields()
      Object.values(req.files).forEach((fileGroup: any) => {
        uploadedFiles.push(...fileGroup);
      });
    }

    if (uploadedFiles.length === 0) {
      res.status(400).json({ success: false, message: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n" });
      return;
    }

    // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n c·∫ßn thi·∫øt (v√≠ d·ª• path ho·∫∑c url)
    const fileInfos = uploadedFiles.map((file) => ({
      filename: file.filename,
      path: file.path,
      mimetype: file.mimetype,
      size: file.size,
    }));

    res.status(200).json({
      success: true,
      message: "T·∫£i ·∫£nh th∆∞∆°ng hi·ªáu th√†nh c√¥ng",
      files: fileInfos,
    });
  } catch (error) {
    console.error("L·ªói khi t·∫£i ·∫£nh:", error);
    res.status(500).json({ success: false, message: "L·ªói khi t·∫£i ·∫£nh th∆∞∆°ng hi·ªáu" });
  }
};

// Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i brand
export const toggleBrandStatus = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      res.status(400).json({ success: false, message: 'ID th∆∞∆°ng hi·ªáu kh√¥ng h·ª£p l·ªá' });
      return;
    }

    if (!['active', 'inactive'].includes(status)) {
      res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n active ho·∫∑c inactive'
      });
      return;
    }

    const brand = await brandModel.findById(id);
    if (!brand) {
      res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu' });
      return;
    }

    brand.status = status;
    await brand.save();

    res.status(200).json({
      success: true,
      message: `Tr·∫°ng th√°i th∆∞∆°ng hi·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${status} th√†nh c√¥ng`,
      brand
    });
  } catch (error) {
    if (error instanceof Error) {
      console.error(`L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th∆∞∆°ng hi·ªáu: ${error.message}`);
      res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß', error: error.message });
      return;
    }
    console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th∆∞∆°ng hi·ªáu:', error);
    res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß' });
  }
};